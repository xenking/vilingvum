// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: dictionary.sql

package database

import (
	"context"
)

const addDictionaryRecord = `-- name: AddDictionaryRecord :exec
INSERT INTO dictionary(topic_id, word, meaning)
VALUES ($1, $2, $3)
`

type AddDictionaryRecordParams struct {
	TopicID int64  `db:"topic_id" json:"topic_id"`
	Word    string `db:"word" json:"word"`
	Meaning string `db:"meaning" json:"meaning"`
}

func (q *Queries) AddDictionaryRecord(ctx context.Context, arg *AddDictionaryRecordParams) error {
	_, err := q.db.Exec(ctx, addDictionaryRecord, arg.TopicID, arg.Word, arg.Meaning)
	return err
}

const getDictionary = `-- name: GetDictionary :many
SELECT word, meaning
FROM dictionary
WHERE topic_id <= $1
ORDER BY id
`

type GetDictionaryRow struct {
	Word    string `db:"word" json:"word"`
	Meaning string `db:"meaning" json:"meaning"`
}

func (q *Queries) GetDictionary(ctx context.Context, topicID int64) ([]*GetDictionaryRow, error) {
	rows, err := q.db.Query(ctx, getDictionary, topicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDictionaryRow
	for rows.Next() {
		var i GetDictionaryRow
		if err := rows.Scan(&i.Word, &i.Meaning); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
