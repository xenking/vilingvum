// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package database

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, username, state)
VALUES ($1, $2, $3, $4)
RETURNING id, name, username, email, phone_number, state, is_admin, settings, active_until, created_at
`

type CreateUserParams struct {
	ID       int64  `db:"id" json:"id"`
	Name     string `db:"name" json:"name"`
	Username string `db:"username" json:"username"`
	State    string `db:"state" json:"state"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.State,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.State,
		&i.IsAdmin,
		&i.Settings,
		&i.ActiveUntil,
		&i.CreatedAt,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username, email, phone_number, state, is_admin, settings, active_until, created_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.State,
		&i.IsAdmin,
		&i.Settings,
		&i.ActiveUntil,
		&i.CreatedAt,
	)
	return &i, err
}

const listActiveUsers = `-- name: ListActiveUsers :many
SELECT id, name, settings, is_admin, active_until
FROM users
WHERE state = 'active'
`

type ListActiveUsersRow struct {
	ID          int64        `db:"id" json:"id"`
	Name        string       `db:"name" json:"name"`
	Settings    pgtype.JSONB `db:"settings" json:"settings"`
	IsAdmin     bool         `db:"is_admin" json:"is_admin"`
	ActiveUntil *time.Time   `db:"active_until" json:"active_until"`
}

func (q *Queries) ListActiveUsers(ctx context.Context) ([]*ListActiveUsersRow, error) {
	rows, err := q.db.Query(ctx, listActiveUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListActiveUsersRow
	for rows.Next() {
		var i ListActiveUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Settings,
			&i.IsAdmin,
			&i.ActiveUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAdmins = `-- name: ListAdmins :many
SELECT id
FROM users
WHERE is_admin = true
`

func (q *Queries) ListAdmins(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaidUsers = `-- name: ListPaidUsers :many
SELECT id, name, settings, is_admin, active_until
FROM users
WHERE active_until > now()
  AND state = 'active'
`

type ListPaidUsersRow struct {
	ID          int64        `db:"id" json:"id"`
	Name        string       `db:"name" json:"name"`
	Settings    pgtype.JSONB `db:"settings" json:"settings"`
	IsAdmin     bool         `db:"is_admin" json:"is_admin"`
	ActiveUntil *time.Time   `db:"active_until" json:"active_until"`
}

func (q *Queries) ListPaidUsers(ctx context.Context) ([]*ListPaidUsersRow, error) {
	rows, err := q.db.Query(ctx, listPaidUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListPaidUsersRow
	for rows.Next() {
		var i ListPaidUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Settings,
			&i.IsAdmin,
			&i.ActiveUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserSubscription = `-- name: UpdateUserSubscription :exec
UPDATE users
SET email        = $2,
    phone_number = $3,
    active_until = $4
WHERE id = $1
`

type UpdateUserSubscriptionParams struct {
	ID          int64      `db:"id" json:"id"`
	Email       *string    `db:"email" json:"email"`
	PhoneNumber *string    `db:"phone_number" json:"phone_number"`
	ActiveUntil *time.Time `db:"active_until" json:"active_until"`
}

func (q *Queries) UpdateUserSubscription(ctx context.Context, arg *UpdateUserSubscriptionParams) error {
	_, err := q.db.Exec(ctx, updateUserSubscription,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.ActiveUntil,
	)
	return err
}
