// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: topic.sql

package database

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const createTopic = `-- name: CreateTopic :one
INSERT INTO topics (type, content)
VALUES ($1, $2)
RETURNING id
`

type CreateTopicParams struct {
	Type    string       `db:"type" json:"type"`
	Content pgtype.JSONB `db:"content" json:"content"`
}

func (q *Queries) CreateTopic(ctx context.Context, arg *CreateTopicParams) (int64, error) {
	row := q.db.QueryRow(ctx, createTopic, arg.Type, arg.Content)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getLatestTopicID = `-- name: GetLatestTopicID :one
SELECT topic_id
FROM user_answers
WHERE user_id = $1
ORDER BY topic_id DESC
LIMIT 1
`

func (q *Queries) GetLatestTopicID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getLatestTopicID, userID)
	var topic_id int64
	err := row.Scan(&topic_id)
	return topic_id, err
}

const getTopics = `-- name: GetTopics :many
SELECT id, next_topic_id, type, content
FROM topics
ORDER BY id
`

type GetTopicsRow struct {
	ID          int64         `db:"id" json:"id"`
	NextTopicID sql.NullInt64 `db:"next_topic_id" json:"next_topic_id"`
	Type        string        `db:"type" json:"type"`
	Content     pgtype.JSONB  `db:"content" json:"content"`
}

func (q *Queries) GetTopics(ctx context.Context) ([]*GetTopicsRow, error) {
	rows, err := q.db.Query(ctx, getTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTopicsRow
	for rows.Next() {
		var i GetTopicsRow
		if err := rows.Scan(
			&i.ID,
			&i.NextTopicID,
			&i.Type,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTopicRelation = `-- name: UpdateTopicRelation :exec
UPDATE topics
SET next_topic_id = $2
WHERE id = $1
`

type UpdateTopicRelationParams struct {
	ID          int64         `db:"id" json:"id"`
	NextTopicID sql.NullInt64 `db:"next_topic_id" json:"next_topic_id"`
}

func (q *Queries) UpdateTopicRelation(ctx context.Context, arg *UpdateTopicRelationParams) error {
	_, err := q.db.Exec(ctx, updateTopicRelation, arg.ID, arg.NextTopicID)
	return err
}
