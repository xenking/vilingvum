// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: topic.sql

package database

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const createTopic = `-- name: CreateTopic :one
INSERT INTO topics (type, content)
VALUES ($1, $2)
RETURNING id
`

type CreateTopicParams struct {
	Type    string       `db:"type" json:"type"`
	Content pgtype.JSONB `db:"content" json:"content"`
}

func (q *Queries) CreateTopic(ctx context.Context, arg *CreateTopicParams) (int64, error) {
	row := q.db.QueryRow(ctx, createTopic, arg.Type, arg.Content)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getLastTopicID = `-- name: GetLastTopicID :one
SELECT topic_id
FROM user_answers
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastTopicID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getLastTopicID, userID)
	var topic_id int64
	err := row.Scan(&topic_id)
	return topic_id, err
}

const getPreviousTopics = `-- name: GetPreviousTopics :many
SELECT t.id, t.content
FROM topics t
         JOIN user_answers a ON t.id = a.topic_id
WHERE a.user_id = $1
  AND t.type = $2
ORDER BY t.id DESC
`

type GetPreviousTopicsParams struct {
	UserID int64  `db:"user_id" json:"user_id"`
	Type   string `db:"type" json:"type"`
}

type GetPreviousTopicsRow struct {
	ID      int64        `db:"id" json:"id"`
	Content pgtype.JSONB `db:"content" json:"content"`
}

func (q *Queries) GetPreviousTopics(ctx context.Context, arg *GetPreviousTopicsParams) ([]*GetPreviousTopicsRow, error) {
	rows, err := q.db.Query(ctx, getPreviousTopics, arg.UserID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetPreviousTopicsRow
	for rows.Next() {
		var i GetPreviousTopicsRow
		if err := rows.Scan(&i.ID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopic = `-- name: GetTopic :one
SELECT id, next_topic_id, type, content
FROM topics
WHERE id = $1
`

type GetTopicRow struct {
	ID          int64         `db:"id" json:"id"`
	NextTopicID sql.NullInt64 `db:"next_topic_id" json:"next_topic_id"`
	Type        string        `db:"type" json:"type"`
	Content     pgtype.JSONB  `db:"content" json:"content"`
}

func (q *Queries) GetTopic(ctx context.Context, id int64) (*GetTopicRow, error) {
	row := q.db.QueryRow(ctx, getTopic, id)
	var i GetTopicRow
	err := row.Scan(
		&i.ID,
		&i.NextTopicID,
		&i.Type,
		&i.Content,
	)
	return &i, err
}

const insertUserAnswer = `-- name: InsertUserAnswer :exec
INSERT INTO user_answers (user_id, topic_id, response)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, topic_id) DO UPDATE SET response   = $3,
                                              updated_at = NOW()
`

type InsertUserAnswerParams struct {
	UserID   int64        `db:"user_id" json:"user_id"`
	TopicID  int64        `db:"topic_id" json:"topic_id"`
	Response pgtype.JSONB `db:"response" json:"response"`
}

func (q *Queries) InsertUserAnswer(ctx context.Context, arg *InsertUserAnswerParams) error {
	_, err := q.db.Exec(ctx, insertUserAnswer, arg.UserID, arg.TopicID, arg.Response)
	return err
}
